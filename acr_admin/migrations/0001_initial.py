# Generated by Django 5.2.4 on 2025-07-30 13:14

import encrypted_model_fields.fields
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="GeneralSetting",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "openai_api_key",
                    encrypted_model_fields.fields.EncryptedTextField(
                        blank=True, null=True
                    ),
                ),
                ("openai_org_id", models.CharField(max_length=255)),
                (
                    "acr_cloud_api_key",
                    encrypted_model_fields.fields.EncryptedTextField(
                        blank=True, null=True
                    ),
                ),
                (
                    "revai_access_token",
                    encrypted_model_fields.fields.EncryptedTextField(
                        blank=True, null=True
                    ),
                ),
                ("summarize_transcript_prompt", models.TextField()),
                ("sentiment_analysis_prompt", models.TextField()),
                ("general_topics_prompt", models.TextField()),
                ("iab_topics_prompt", models.TextField()),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "bucket_prompt",
                    models.TextField(
                        blank=True,
                        help_text="Prompt describing the definitions and classification rules for wellness buckets.",
                        null=True,
                    ),
                ),
                (
                    "bucket_definition_error_rate",
                    models.PositiveIntegerField(
                        blank=True,
                        default=80,
                        help_text="Minimum accuracy percentage required for bucket classification (e.g., 80).",
                        null=True,
                    ),
                ),
                (
                    "chatgpt_model",
                    models.CharField(
                        blank=True,
                        default="gpt-3.5-turbo",
                        help_text="ChatGPT model to use for classification (e.g., gpt-40).",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "chatgpt_max_tokens",
                    models.PositiveIntegerField(
                        blank=True,
                        default=0,
                        help_text="Maximum tokens for ChatGPT response (0 for default).",
                        null=True,
                    ),
                ),
                (
                    "chatgpt_temperature",
                    models.FloatField(
                        blank=True,
                        default=1.0,
                        help_text="ChatGPT temperature parameter.",
                        null=True,
                    ),
                ),
                (
                    "chatgpt_top_p",
                    models.FloatField(
                        blank=True,
                        default=1.0,
                        help_text="ChatGPT top_p parameter.",
                        null=True,
                    ),
                ),
                (
                    "chatgpt_frequency_penalty",
                    models.FloatField(
                        blank=True,
                        default=0.0,
                        help_text="ChatGPT frequency penalty parameter.",
                        null=True,
                    ),
                ),
                (
                    "chatgpt_presence_penalty",
                    models.FloatField(
                        blank=True,
                        default=0.0,
                        help_text="ChatGPT presence penalty parameter.",
                        null=True,
                    ),
                ),
                (
                    "determine_radio_content_type_prompt",
                    models.TextField(
                        blank=True,
                        help_text="Prompt for determining radio content type from transcript.",
                        null=True,
                    ),
                ),
                (
                    "radio_segment_types",
                    models.TextField(
                        blank=True,
                        help_text="Comma-separated list of radio segment/content types.",
                        null=True,
                    ),
                ),
                (
                    "radio_segment_error_rate",
                    models.PositiveIntegerField(
                        blank=True,
                        default=80,
                        help_text="Minimum accuracy percentage required for radio segment classification (e.g., 80).",
                        null=True,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="WellnessBucket",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "bucket_id",
                    models.CharField(editable=False, max_length=20, unique=True),
                ),
                ("title", models.CharField(max_length=255)),
                ("description", models.TextField()),
                (
                    "prompt",
                    models.TextField(
                        help_text="Prompt to use when analyzing transcript for this bucket"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Channel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(blank=True, max_length=255)),
                ("channel_id", models.PositiveIntegerField()),
                ("project_id", models.PositiveIntegerField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("is_deleted", models.BooleanField(default=False)),
            ],
            options={
                "constraints": [
                    models.UniqueConstraint(
                        fields=("channel_id", "project_id"),
                        name="unique_channel_per_project",
                    )
                ],
            },
        ),
    ]
